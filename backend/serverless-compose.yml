# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: yuewang
# Serverless Framework can deploy multiple types of templates:
#   1) Traditional Serverless Framework templates
#   2) AWS Cloudformation Templates
#   3) AWS SAM Templates.
# This is useful if your organization is using these different templates and wants one tool to standardize around.
# Here, we use Serverless Framework Compose (serverless.com/framework/docs/guides/compose) to deploy three different template types in a single deploy command.
# Deployments happen in parallel by default. You can also share outputs from one Service to another, across template types.
# In this case, Compose will auto-determine the correct order to deploy each Service.
app: linerra

# Example stage-specific parameters you might need in your services.
stages:
  prod:
    observability: true
  test:
    observability: true
  default:
    params:
      stationUserPoolName: station-user-pool-${sls:stage}
      stationUserPoolClientName: station-user-pool-client-${sls:stage}
      stationUserPoolDomain: station-user-pool-domain-${sls:stage}
      mainTable: ${sls:stage}_main_table
      stationFrontendUrl: ${env:STATION_FRONTEND_URL, param:stationFrontendUrl-${sls:stage}, 'http://localhost:8000'}
      localDynamoDBPort: ${env:LOCAL_DYNAMO_DB_PORT, 8900}
      labelBucketName: shipment-label-bucket-${sls:stage}
      processLabelAndUpdateShipmentFunctionName: ${self:service}-${sls:stage}-processLabelAndUpdateShipment

services:
  # Framework: AWS CloudFormation
  # The service name here will be used as the underlying cloudformation stack name.
  # Make sure it’s unique so it doesn’t collide, and accidently update another stack.
  # If you change it, make sure you update the references in other services.
  shared-resources:
    path: cloudformation
    #params:
    # We are passing a simple string parameter to the CloudFormation template.
    # If you open the template file, you will see that we reference it with ${param:tableNamePrefix}
    #tableNamePrefix: shared-table

  # Framework: Serverless Framework Traditional
  station:
    path: station
    dependsOn:
      - shared-resources
    params:
      # We are passing a reference to the shared CloudFormation stack output to the traditional service.
      # The shared CloudFormation stack is deployed first, and the output is passed to this service.
      stationUserPoolId: ${shared-resources.StationUserPoolId}
      stationUserPoolClientId: ${shared-resources.StationUserPoolClientId}

  functions:
    path: functions
    dependsOn:
      - shared-resources

  # Framework: AWS SAM
  #sam:
  #path: sam
  #params:
  # We do the same here, passing the shared CloudFormation stack output to the SAM service.
  # Both the traditional and SAM services will be deployed in parallel.
  # As they both depend on the same shared service.
  #tableName: ${shared-resources-example.TableName}
