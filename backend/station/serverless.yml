service: station

stages:
  default:
    params:
      #cloudFrontAlternateDomain: ${param:cloudFrontAlternateDomain-${sls:stage}, param:defaultCloudFrontAlternateDomain}

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  timeout: 60

  environment:
    STATION_USER_POOL_ID: ${param:stationUserPoolId}
    STATION_USER_POOL_CLIENT_ID: ${param:stationUserPoolClientId}
    STATION_USER_POOL_REGION: ${self:provider.region}
    STATION_USER_POOL_DOMAIN: ${param:stationUserPoolDomain}
    MAIN_TABLE: ${param:mainTable}
    VERYK_APP_ID: ${env:VERYK_APP_ID, param:verykAppId}
    VERYK_APP_SECRET: ${env:VERYK_APP_SECRET, param:verykAppSecret}
    VERYK_API_URL: ${env:VERYK_API_URL, param:verykApiUrl}
    STATION_FRONTEND_URL: ${param:stationFrontendUrl}
    LOCAL_DYNAMO_DB_PORT: ${param:localDynamoDBPort}
    S3_LABEL_BUCKET_NAME: ${param:labelBucketName}
    #PROCESS_LABEL_AND_UPDATE_SHIPMENT_FUNCTION_NAME: ${param:processLabelAndUpdateShipmentFunctionName}

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'cognito-idp:AdminCreateUser'
            - 'cognito-idp:AdminDeleteUser'
            - 'cognito-idp:AdminGetUser'
            - 'cognito-idp:AdminUpdateUserAttributes'
            - 'cognito-idp:ListUsers'
            - 'cognito-idp:AdminInitiateAuth'
            - 'cognito-idp:AdminRespondToAuthChallenge'
            - 'cognito-idp:AdminSetUserPassword'
            - 'cognito-idp:SignUp'
            - 'cognito-idp:ConfirmSignUp'
            - 'cognito-idp:ForgotPassword'
            - 'cognito-idp:ConfirmForgotPassword'
            - 'cognito-idp:ChangePassword'
          Resource: '*'
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource: '*'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:PutObjectAcl
          Resource: '*'
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource: '*'

functions:
  api:
    handler: src/server.handler
    # layers:
    #   - !Ref LayerDependenciesLambdaLayer
    events:
      - httpApi: '*'
    environment:
      # We are using the output of the shared resources CloudFormation template
      # that is passed down from Serverless Compose, and the staged param "domain".
      #TABLE_NAME: ${param:tableName}
      #DOMAIN: ${param:domain}

custom:
  serverless-offline:
    reloadHandler: true
  dynamodb:
    start:
      docker: true
      port: ${param:localDynamoDBPort}
      migrate: true
      noStart: true
      #sharedDb: true

  # addHttpOffline: # Only used for local testing (offline) as Lambda URL is not (yet) supported by Serverless Offline
  #   integrationInternal:
  #     offline:
  #       - httpApi: "*"

# package:
#   individually: true

plugins:
  - serverless-cloudside-plugin
  - serverless-dynamodb
  - serverless-offline

build:
  esbuild:
    # Enable or Disable bundling the function code and dependencies. (Default: true)
    bundle: true
    # Enable minifying function code. (Default: false)
    minify: false
    # NPM packages to not be bundled. Glob patterns are supported here.
    # external:
    #   - '@aws-sdk/client-s3'
    # NPM packages to not be bundled, as well as not included in node_modules
    # in the zip file uploaded to Lambda. By default this will be set to aws-sdk
    # if the runtime is set to nodejs16.x or lower or set to @aws-sdk/* if set to nodejs18.x or higher.
    # Glob patterns are supported here.
    exclude:
      - '@aws-sdk/*'
    # The packages config, this can be set to override the behavior of external
    # If this is set then all dependencies will be treated as external and not bundled.
    packages: external
    # By default Framework will attempt to build and package all functions concurrently.
    # This property can bet set to a different number if you wish to limit the
    # concurrency of those operations.
    # buildConcurrency: 3
    # Enable or configure sourcemaps, can be set to true or to an object with further configuration.
    # sourcemap:
    #   # The sourcemap type to use, options are (inline, linked, or external)
    #   type: linked
    #   # Whether to set the NODE_OPTIONS on functions to enable sourcemaps on Lambda
    #   setNodeOptions: true
# layers:
#   layerDependencies:
#     path: ../../node_modules # required, path to layer contents on disk
#     name: ${sls:stage}-layerDependencies # optional, Deployed Lambda layer name
#     description: Description of what the lambda layer does # optional, Description to publish to AWS

#     # allowedAccounts: # optional, a list of AWS account IDs allowed to access this layer.
#     #   - '*'
#     # note: uncommenting this will give all AWS users access to this layer unconditionally.
#     retain: false # optional, false by default. If true, layer versions are not deleted as new ones are created
